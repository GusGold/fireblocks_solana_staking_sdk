"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FireblocksSDK = void 0;
const api_client_1 = require("./api-client");
const api_token_provider_1 = require("./api-token-provider");
const query_string_1 = __importDefault(require("query-string"));
__exportStar(require("./types"), exports);
class FireblocksSDK {
    /**
     * Creates a new Fireblocks API Client
     * @param privateKey A string representation of your private key
     * @param apiKey Your api key. This is a uuid you received from Fireblocks
     * @param apiBaseUrl The fireblocks server URL. Leave empty to use the default server
     * @param authProvider
     * @param sdkOptions
     */
    constructor(privateKey, apiKey, apiBaseUrl = "https://api.fireblocks.io", authProvider = undefined, sdkOptions) {
        this.authProvider = authProvider !== null && authProvider !== void 0 ? authProvider : new api_token_provider_1.ApiTokenProvider(privateKey, apiKey);
        if (apiBaseUrl) {
            this.apiBaseUrl = apiBaseUrl;
        }
        this.apiClient = new api_client_1.ApiClient(this.authProvider, this.apiBaseUrl, { timeoutInMs: sdkOptions === null || sdkOptions === void 0 ? void 0 : sdkOptions.timeoutInMs });
    }
    /**
     * Gets all assets that are currently supported by Fireblocks
     */
    getSupportedAssets() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/supported_assets");
        });
    }
    /**
     * Gets all vault accounts for your tenant
     */
    getVaultAccounts(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/vault/accounts?${query_string_1.default.stringify(filter)}`;
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * Gets a list of vault accounts per page matching the given filter or path
     * @param pagedVaultAccountsRequestFilters Filters for the first request
     */
    getVaultAccountsWithPageInfo(pagedVaultAccountsRequestFilters) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/vault/accounts_paged?${query_string_1.default.stringify(pagedVaultAccountsRequestFilters)}`);
        });
    }
    /**
     * @deprecated Replaced by getVaultAccountById.
     * Gets a single vault account
     * @param vaultAccountId The vault account ID
     */
    getVaultAccount(vaultAccountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getVaultAccountById(vaultAccountId);
        });
    }
    /**
     * Gets a single vault account
     * @param vaultAccountId The vault account ID
     */
    getVaultAccountById(vaultAccountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/vault/accounts/${vaultAccountId}`);
        });
    }
    /**
     * Gets a single vault account asset
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset to get
     */
    getVaultAccountAsset(vaultAccountId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}`);
        });
    }
    /**
     * Gets a single vault account asset balance after forcing refresh from the blockchain
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset to get
     * @param requestOptions
     */
    refreshVaultAssetBalance(vaultAccountId, assetId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}/balance`, "{}", requestOptions);
        });
    }
    /**
     * Gets deposit addresses for an asset in a vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset for which to get the deposit address
     */
    getDepositAddresses(vaultAccountId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}/addresses`);
        });
    }
    /**
     * Gets utxo list for an asset in a vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset for which to get the utxo list
     */
    getUnspentInputs(vaultAccountId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}/unspent_inputs`);
        });
    }
    /**
     * Generates a new address for an asset in a vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset for which to generate the deposit address
     * @param description A description for the new address
     * @param customerRefId A customer reference ID
     * @param requestOptions
     */
    generateNewAddress(vaultAccountId, assetId, description, customerRefId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}/addresses`, {
                description,
                customerRefId
            }, requestOptions);
        });
    }
    /**
     * Sets the description of an existing address
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset
     * @param address The address for which to set the description
     * @param tag The XRP tag, or EOS memo, for which to set the description
     * @param description The description to set
     */
    setAddressDescription(vaultAccountId, assetId, address, tag, description) {
        return __awaiter(this, void 0, void 0, function* () {
            let addressId = address;
            if (tag && tag.length > 0) {
                addressId = `${address}:${tag}`;
            }
            return yield this.apiClient.issuePutRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}/addresses/${addressId}`, { description: description || "" });
        });
    }
    /**
     * Gets all network connections
     */
    getNetworkConnections() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/network_connections");
        });
    }
    /**
     * Gets a single network connection by id
     */
    getNetworkConnectionById(connectionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/network_connections/${connectionId}`);
        });
    }
    /**
     * Gets all exchange accounts for your tenant
     */
    getExchangeAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/exchange_accounts");
        });
    }
    /**
     * @deprecated Replaced by getExchangeAccountById
     * Gets a single exchange account by ID
     * @param exchangeAccountId The exchange account ID
     */
    getExchangeAccount(exchangeAccountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getExchangeAccount(exchangeAccountId);
        });
    }
    /**
     * Gets a single exchange account by ID
     * @param exchangeAccountId The exchange account ID
     */
    getExchangeAccountById(exchangeAccountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/exchange_accounts/${exchangeAccountId}`);
        });
    }
    /**
     * Gets a single asset within an Exchange Account
     * @param exchangeAccountId The exchange account ID
     * @param assetId The ID of the asset
     */
    getExchangeAsset(exchangeAccountId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/exchange_accounts/${exchangeAccountId}/${assetId}`);
        });
    }
    /**
     * Convert an asset at an Exchange Account
     * @param exchangeAccountId The exchange account ID
     * @param srcAsset The source asset to convert from
     * @param destAsset The destination asset to convert to
     * @param amount The amount to convert
     */
    convertExchangeAsset(exchangeAccountId, srcAsset, destAsset, amount, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/exchange_accounts/${exchangeAccountId}/convert`, {
                srcAsset, destAsset, amount
            }, requestOptions);
        });
    }
    /**
     * Transfer from a main exchange account to a subaccount
     * @param exchangeAccountId The exchange ID in Fireblocks
     * @param subaccountId The ID of the subaccount in the exchange
     * @param assetId The asset to transfer
     * @param amount The amount to transfer
     * @param requestOptions
     */
    transferToSubaccount(exchangeAccountId, subaccountId, assetId, amount, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                subaccountId,
                amount
            };
            return yield this.apiClient.issuePostRequest(`/v1/exchange_accounts/${exchangeAccountId}/${assetId}/transfer_to_subaccount`, body, requestOptions);
        });
    }
    /**
     * Transfer from a subaccount to a main exchange account
     * @param exchangeAccountId The exchange ID in Fireblocks
     * @param subaccountId The ID of the subaccount in the exchange
     * @param assetId The asset to transfer
     * @param amount The amount to transfer
     * @param requestOptions
     */
    transferFromSubaccount(exchangeAccountId, subaccountId, assetId, amount, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                subaccountId,
                amount
            };
            return yield this.apiClient.issuePostRequest(`/v1/exchange_accounts/${exchangeAccountId}/${assetId}/transfer_from_subaccount`, body, requestOptions);
        });
    }
    /**
     * Gets all fiat accounts for your tenant
     */
    getFiatAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/fiat_accounts");
        });
    }
    /**
     * Gets a single fiat account by ID
     * @param accountId The fiat account ID
     */
    getFiatAccountById(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/fiat_accounts/${accountId}`);
        });
    }
    /**
     * Redeem from a fiat account to a linked DDA
     * @param accountId The fiat account ID in Fireblocks
     * @param amount The amount to transfer
     * @param requestOptions
     */
    redeemToLinkedDDA(accountId, amount, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                amount
            };
            return yield this.apiClient.issuePostRequest(`/v1/fiat_accounts/${accountId}/redeem_to_linked_dda`, body, requestOptions);
        });
    }
    /**
     * Deposit to a fiat account from a linked DDA
     * @param accountId The fiat account ID in Fireblocks
     * @param amount The amount to transfer
     * @param requestOptions
     */
    depositFromLinkedDDA(accountId, amount, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                amount
            };
            return yield this.apiClient.issuePostRequest(`/v1/fiat_accounts/${accountId}/deposit_from_linked_dda`, body, requestOptions);
        });
    }
    /**
     * Gets a list of transactions matching the given filter
     * @param filter.before Only gets transactions created before a given timestamp (in milliseconds)
     * @param filter.after Only gets transactions created after a given timestamp (in milliseconds)
     * @param filter.status Only gets transactions with the spcified status
     * @param filter.limit Limit the amount of returned results. If not specified, a limit of 200 results will be used
     * @param filter.orderBy Determines the order of the results
     */
    getTransactions(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/transactions?${query_string_1.default.stringify(filter)}`);
        });
    }
    /**
     * Gets a list of transactions per page matching the given filter or path
     * @param pageFilter Get transactions matching pageFilter params
     * @param nextOrPreviousPath Get transactions from each of pageDetails paths
     */
    getTransactionsWithPageInfo(pageFilter, nextOrPreviousPath) {
        return __awaiter(this, void 0, void 0, function* () {
            if (pageFilter) {
                return yield this.apiClient.issueGetRequest(`/v1/transactions?${query_string_1.default.stringify(pageFilter)}`, true);
            }
            else if (nextOrPreviousPath) {
                const index = nextOrPreviousPath.indexOf("/v1/");
                const path = nextOrPreviousPath.substring(index, nextOrPreviousPath.length);
                return yield this.apiClient.issueGetRequest(path, true);
            }
            return { transactions: [], pageDetails: { prevPage: "", nextPage: "" } };
        });
    }
    /**
     * Gets a transaction matching the external transaction id provided
     * @param externalTxId
     */
    getTransactionByExternalTxId(externalTxId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/transactions/external_tx_id/${externalTxId}`);
        });
    }
    /**
     * Gets all internal wallets for your tenant
     */
    getInternalWallets() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/internal_wallets");
        });
    }
    /**
     * Gets a single internal wallet
     * @param walletId The internal wallet ID
     */
    getInternalWallet(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/internal_wallets/${walletId}`);
        });
    }
    /**
     * Gets a single internal wallet asset
     * @param walletId The internal wallet ID
     * @param assetId The asset ID
     */
    getInternalWalletAsset(walletId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/internal_wallets/${walletId}/${assetId}`);
        });
    }
    /**
     * Gets all external wallets for your tenant
     */
    getExternalWallets() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/external_wallets");
        });
    }
    /**
     * Gets a single external wallet
     * @param walletId The external wallet ID
     */
    getExternalWallet(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/external_wallets/${walletId}`);
        });
    }
    /**
     * Gets a single external wallet asset
     * @param walletId The external wallet ID
     * @param assetId The asset ID
     */
    getExternalWalletAsset(walletId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/external_wallets/${walletId}/${assetId}`);
        });
    }
    /**
     * Gets detailed information for a single transaction
     * @param txId The transaction id to query
     */
    getTransactionById(txId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/transactions/${txId}`);
        });
    }
    /**
     * Cancels the selected transaction
     * @param txId The transaction id to cancel
     * @param requestOptions
     */
    cancelTransactionById(txId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/transactions/${txId}/cancel`, {}, requestOptions);
        });
    }
    /**
     * Creates a new vault account
     * @param name A name for the new vault account
     * @param hiddenOnUI If true, the created account and all related transactions will not be shown on Fireblocks console
     * @param customerRefId A customer reference ID
     * @param autoFuel
     * @param requestOptions
     * @param autoFuel
     * @param requestOptions
     */
    createVaultAccount(name, hiddenOnUI, customerRefId, autoFuel, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                name,
                customerRefId,
                hiddenOnUI: hiddenOnUI || false,
                autoFuel: autoFuel || false
            };
            return yield this.apiClient.issuePostRequest("/v1/vault/accounts", body, requestOptions);
        });
    }
    /**
     * Hides a vault account in Fireblocks console
     * @param vaultAccountId The vault account ID
     * @param requestOptions
     */
    hideVaultAccount(vaultAccountId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/hide`, {}, requestOptions);
        });
    }
    /**
     * Reveals a hidden vault account in Fireblocks console
     * @param vaultAccountId The vault account ID
     * @param requestOptions
     */
    unhideVaultAccount(vaultAccountId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/unhide`, {}, requestOptions);
        });
    }
    /**
     * Sets autoFuel to true/false for a vault account
     * @param vaultAccountId The vault account ID
     * @param autoFuel The new value for the autoFuel flag
     * @param requestOptions
     */
    setAutoFuel(vaultAccountId, autoFuel, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/set_auto_fuel`, { autoFuel }, requestOptions);
        });
    }
    /**
     * Updates a vault account
     * @param vaultAccountId
     * @param name A new name for the vault account
     */
    updateVaultAccount(vaultAccountId, name) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                name: name
            };
            return yield this.apiClient.issuePutRequest(`/v1/vault/accounts/${vaultAccountId}`, body);
        });
    }
    /**
     * Creates a new asset within an existing vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The asset to add
     * @param requestOptions
     */
    createVaultAsset(vaultAccountId, assetId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}`, {}, requestOptions);
        });
    }
    /**
     * Retry to create a vault asset for a vault asset that failed
     * @param vaultAccountId The vault account ID
     * @param assetId The asset to add
     * @param requestOptions
     */
    activateVaultAsset(vaultAccountId, assetId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}/activate`, {}, requestOptions);
        });
    }
    /**
     * Creates a new external wallet
     * @param name A name for the new external wallet
     * @param customerRefId A customer reference ID
     * @param requestOptions
     */
    createExternalWallet(name, customerRefId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                name,
                customerRefId
            };
            return yield this.apiClient.issuePostRequest("/v1/external_wallets", body, requestOptions);
        });
    }
    /**
     * Creates a new internal wallet
     * @param name A name for the new internal wallet
     * @param customerRefId A customer reference ID
     * @param requestOptions
     */
    createInternalWallet(name, customerRefId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                name,
                customerRefId
            };
            return yield this.apiClient.issuePostRequest("/v1/internal_wallets", body, requestOptions);
        });
    }
    /**
     * Creates a new asset within an exiting external wallet
     * @param walletId The wallet id
     * @param assetId The asset to add
     * @param address The wallet address
     * @param tag (for ripple only) The ripple account tag
     * @param requestOptions
     */
    createExternalWalletAsset(walletId, assetId, address, tag, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = `/v1/external_wallets/${walletId}/${assetId}`;
            const body = {
                address: address,
                tag: tag
            };
            return yield this.apiClient.issuePostRequest(path, body, requestOptions);
        });
    }
    /**
     * Creates a new asset within an exiting internal wallet
     * @param walletId The wallet id
     * @param assetId The asset to add
     * @param address The wallet address
     * @param tag (for ripple only) The ripple account tag
     * @param requestOptions
     */
    createInternalWalletAsset(walletId, assetId, address, tag, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = `/v1/internal_wallets/${walletId}/${assetId}`;
            const body = {
                address: address,
                tag: tag
            };
            return yield this.apiClient.issuePostRequest(path, body, requestOptions);
        });
    }
    /**
     * Creates a new transaction with the specified options
     */
    createTransaction(transactionArguments, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest("/v1/transactions", transactionArguments, requestOptions);
        });
    }
    /**
     * Estimates the fee for a transaction request
     */
    estimateFeeForTransaction(transactionArguments, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest("/v1/transactions/estimate_fee", transactionArguments, requestOptions);
        });
    }
    /**
     * Gets the estimated fees for an asset
     */
    getFeeForAsset(asset) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/estimate_network_fee?assetId=${asset}`);
        });
    }
    /**
     * Creates a new transfer ticket
     */
    createTransferTicket(options, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest("/v1/transfer_tickets", options, requestOptions);
        });
    }
    /**
     * Gets all transfer tickets
     */
    getTransferTickets() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/transfer_tickets");
        });
    }
    /**
     * Get a transfer ticket by ticket ID
     * @param ticketId
     */
    getTransferTicketById(ticketId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/transfer_tickets/${ticketId}`);
        });
    }
    /**
     * Get a term of transfer ticket
     * @param ticketId
     * @param termId
     */
    getTransferTicketTerm(ticketId, termId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/transfer_tickets/${ticketId}/${termId}`);
        });
    }
    /**
     * Cancel the transfer ticket
     * @param ticketId
     * @param requestOptions
     */
    cancelTransferTicket(ticketId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/transfer_tickets/${ticketId}/cancel`, {}, requestOptions);
        });
    }
    /**
     * Executes a transaction for a single term of a transfer ticket
     * @param ticketId
     * @param termId
     * @param options
     * @param requestOptions
     */
    executeTransferTicketTerm(ticketId, termId, options, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/transfer_tickets/${ticketId}/${termId}/transfer`, options, requestOptions);
        });
    }
    /**
     * Deletes a single internal wallet
     * @param walletId The internal wallet ID
     */
    deleteInternalWallet(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueDeleteRequest(`/v1/internal_wallets/${walletId}`);
        });
    }
    /**
     * Deletes a single internal wallet asset
     * @param walletId The internal wallet ID
     * @param assetId The asset ID
     */
    deleteInternalWalletAsset(walletId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueDeleteRequest(`/v1/internal_wallets/${walletId}/${assetId}`);
        });
    }
    /**
     * Deletes a single external wallet
     * @param walletId The external wallet ID
     */
    deleteExternalWallet(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueDeleteRequest(`/v1/external_wallets/${walletId}`);
        });
    }
    /**
     * Deletes a single external wallet asset
     * @param walletId The external wallet ID
     * @param assetId The asset ID
     */
    deleteExternalWalletAsset(walletId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueDeleteRequest(`/v1/external_wallets/${walletId}/${assetId}`);
        });
    }
    /**
     * Sets a customer reference ID
     * @param vaultAccountId The vault account ID
     * @param customerRefId The customer reference ID to set
     * @param requestOptions
     */
    setCustomerRefIdForVaultAccount(vaultAccountId, customerRefId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/set_customer_ref_id`, { customerRefId }, requestOptions);
        });
    }
    /**
     * Sets a customer reference ID
     * @param walletId The ID of the internal wallet
     * @param customerRefId The customer reference ID to set
     * @param requestOptions
     */
    setCustomerRefIdForInternalWallet(walletId, customerRefId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/internal_wallets/${walletId}/set_customer_ref_id`, { customerRefId }, requestOptions);
        });
    }
    /**
     * Sets a customer reference ID
     * @param walletId The ID of the external wallet
     * @param customerRefId The customer reference ID to set
     * @param requestOptions
     */
    setCustomerRefIdForExternalWallet(walletId, customerRefId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/external_wallets/${walletId}/set_customer_ref_id`, { customerRefId }, requestOptions);
        });
    }
    /**
     * Sets a customer reference ID
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset
     * @param address The address
     * @param tag The XRP tag, or EOS memo
     * @param customerRefId The customer reference ID to set
     * @param requestOptions
     */
    setCustomerRefIdForAddress(vaultAccountId, assetId, address, tag, customerRefId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            let addressId = address;
            if (tag && tag.length > 0) {
                addressId = `${address}:${tag}`;
            }
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}/addresses/${addressId}/set_customer_ref_id`, { customerRefId }, requestOptions);
        });
    }
    /**
     * Set the required number of confirmations for transaction
     * @param txId
     * @param requiredConfirmationsNumber
     * @param requestOptions
     */
    setConfirmationThresholdForTxId(txId, requiredConfirmationsNumber, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/transactions/${txId}/set_confirmation_threshold`, { numOfConfirmations: requiredConfirmationsNumber }, requestOptions);
        });
    }
    /**
     * Set the required number of confirmations for transactions by tx hash
     * @param txHash
     * @param requiredConfirmationsNumber
     * @param requestOptions
     */
    setConfirmationThresholdForTxHash(txHash, requiredConfirmationsNumber, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/txHash/${txHash}/set_confirmation_threshold`, { numOfConfirmations: requiredConfirmationsNumber }, requestOptions);
        });
    }
    /**
     * Get the public key information
     * @param args
     */
    getPublicKeyInfo(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = `/v1/vault/public_key_info`;
            if (args.algorithm) {
                url += `?algorithm=${args.algorithm}`;
            }
            if (args.derivationPath) {
                url += `&derivationPath=${args.derivationPath}`;
            }
            if (args.compressed) {
                url += `&compressed=${args.compressed}`;
            }
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * allocate funds from you default balance to a private ledger
     * @param vaultAccountId
     * @param asset
     * @param vaultAccountId
     * @param asset
     * @param args
     * @param requestOptions
     */
    allocateFundsToPrivateLedger(vaultAccountId, asset, args, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/vault/accounts/${vaultAccountId}/${asset}/lock_allocation`;
            return yield this.apiClient.issuePostRequest(url, args, requestOptions);
        });
    }
    /**
     * deallocate funds from a private ledger to your default balance
     * @param vaultAccountId
     * @param asset
     * @param args
     * @param requestOptions
     */
    deallocateFundsFromPrivateLedger(vaultAccountId, asset, args, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/vault/accounts/${vaultAccountId}/${asset}/release_allocation`;
            return yield this.apiClient.issuePostRequest(url, args, requestOptions);
        });
    }
    /**
     * Get the public key information for a vault account
     * @param args
     */
    getPublicKeyInfoForVaultAccount(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = `/v1/vault/accounts/${args.vaultAccountId}/${args.assetId}/${args.change}/${args.addressIndex}/public_key_info`;
            if (args.compressed) {
                url += `?compressed=${args.compressed}`;
            }
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * Get configuration and status of the Gas Station account
     */
    getGasStationInfo(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = `/v1/gas_station`;
            if (assetId) {
                url += `/${assetId}`;
            }
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * Set configuration of the Gas Station account
     */
    setGasStationConfiguration(gasThreshold, gasCap, maxGasPrice, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = `/v1/gas_station/configuration`;
            if (assetId) {
                url += `/${assetId}`;
            }
            const body = { gasThreshold, gasCap, maxGasPrice };
            return yield this.apiClient.issuePutRequest(url, body);
        });
    }
    /**
     * Drop an ETH based transaction
     */
    dropTransaction(txId, feeLevel, requestedFee, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/transactions/${txId}/drop`;
            const body = { feeLevel, requestedFee };
            return yield this.apiClient.issuePostRequest(url, body, requestOptions);
        });
    }
    /**
     * Get max spendable amount per asset and vault
     */
    getMaxSpendableAmount(vaultAccountId, assetId, manualSigning) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = `/v1/vault/accounts/${vaultAccountId}/${assetId}/max_spendable_amount`;
            if (manualSigning) {
                url += `?manualSigning=${manualSigning}`;
            }
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * Get all vault assets balance overview
     */
    getVaultAssetsBalance(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/vault/assets?${query_string_1.default.stringify(filter)}`;
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * Get vault balance overview per asset
     */
    getVaultBalanceByAsset(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/vault/assets/${assetId}`;
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * Get address validation info
     */
    validateAddress(assetId, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/transactions/validate_address/${assetId}/${address}`;
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * Unfreezes the selected transaction
     * @param txId The transaction id to unfreeze
     * @param requestOptions
     */
    unfreezeTransactionById(txId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiClient.issuePostRequest(`/v1/transactions/${txId}/unfreeze`, {}, requestOptions);
        });
    }
    /**
     * Freezes the selected transaction
     * @param txId The transaction id to freeze
     * @param requestOptions
     */
    freezeTransactionById(txId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiClient.issuePostRequest(`/v1/transactions/${txId}/freeze`, {}, requestOptions);
        });
    }
    /**
     * Resend failed webhooks
     */
    resendWebhooks(requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest("/v1/webhooks/resend", {}, requestOptions);
        });
    }
    /**
     * Resend transaction webhooks
     * @param txId The transaction for which the message is sent
     * @param resendCreated If true a webhook will be sent for the creation of the transaction
     * @param resendStatusUpdated If true a webhook will be sent for the status of the transaction
     * @param requestOptions
     */
    resendTransactionWebhooksById(txId, resendCreated, resendStatusUpdated, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = { resendCreated, resendStatusUpdated };
            return yield this.apiClient.issuePostRequest(`/v1/webhooks/resend/${txId}`, body, requestOptions);
        });
    }
    /**
     * Gets all Users for your tenant
     */
    getUsers() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/users");
        });
    }
    /**
     * Get off exchange accounts
     */
    getOffExchangeAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/off_exchange_accounts`);
        });
    }
    /**
     * Get off exchange account by virtual account id
     * @param id the ID of the off exchange
     */
    getOffExchangeAccountById(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/off_exchange_accounts/${id}`);
        });
    }
    /**
     * Settle off exchange account by virtual account id
     * @param id the ID of the off exchange
     * @param requestOptions
     */
    settleOffExchangeAccountById(id, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/off_exchange_accounts/${id}/settle`, {}, requestOptions);
        });
    }
    /**
     * Set Fee Payer configuration
     * @param feePayerConfiguration
     * @param baseAsset
     * @param requestOptions
     */
    setFeePayerConfiguration(baseAsset, feePayerConfiguration, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/fee_payer/${baseAsset}`, feePayerConfiguration, requestOptions);
        });
    }
    /**
     * Get Fee Payer Configuration
     * @param baseAsset
     */
    getFeePayerConfiguration(baseAsset) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/fee_payer/${baseAsset}`);
        });
    }
    /**
     * Delete Fee Payer Configuration
     * @param baseAsset
     */
    removeFeePayerConfiguration(baseAsset) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueDeleteRequest(`/v1/fee_payer/${baseAsset}`);
        });
    }
}
exports.FireblocksSDK = FireblocksSDK;
//# sourceMappingURL=fireblocks-sdk.js.map