"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = void 0;
const axios_1 = __importDefault(require("axios"));
class ApiClient {
    constructor(authProvider, apiBaseUrl, options) {
        this.authProvider = authProvider;
        this.apiBaseUrl = apiBaseUrl;
        this.options = options;
        this.axiosInstance = axios_1.default.create({
            baseURL: this.apiBaseUrl
        });
    }
    issueGetRequest(path, pageMode = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = this.authProvider.signJwt(path);
            const res = yield this.axiosInstance.get(path, {
                headers: {
                    "X-API-Key": this.authProvider.getApiKey(),
                    "Authorization": `Bearer ${token}`
                },
                timeout: this.options.timeoutInMs
            });
            if (pageMode) {
                return {
                    transactions: res.data,
                    pageDetails: {
                        prevPage: res.headers["prev-page"] ? res.headers["prev-page"].toString() : "",
                        nextPage: res.headers["next-page"] ? res.headers["next-page"].toString() : "",
                    }
                };
            }
            return res.data;
        });
    }
    issuePostRequest(path, body, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = this.authProvider.signJwt(path, body);
            const idempotencyKey = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.idempotencyKey;
            const headers = {
                "X-API-Key": this.authProvider.getApiKey(),
                "Authorization": `Bearer ${token}`,
            };
            if (idempotencyKey) {
                headers["Idempotency-Key"] = idempotencyKey;
            }
            return (yield this.axiosInstance.post(path, body, {
                headers,
                timeout: this.options.timeoutInMs
            })).data;
        });
    }
    issuePutRequest(path, body) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = this.authProvider.signJwt(path, body);
            return (yield this.axiosInstance.put(path, body, {
                headers: {
                    "X-API-Key": this.authProvider.getApiKey(),
                    "Authorization": `Bearer ${token}`
                },
                timeout: this.options.timeoutInMs
            })).data;
        });
    }
    issueDeleteRequest(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = this.authProvider.signJwt(path);
            return (yield this.axiosInstance.delete(path, {
                headers: {
                    "X-API-Key": this.authProvider.getApiKey(),
                    "Authorization": `Bearer ${token}`
                },
                timeout: this.options.timeoutInMs
            })).data;
        });
    }
}
exports.ApiClient = ApiClient;
//# sourceMappingURL=api-client.js.map